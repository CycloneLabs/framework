$switcher-color: text-color($text-default) !default;
$switcher-hover-color: text-color($text-hovered) !default;
$switcher-focus-color: text-color($text-focused) !default;
$switcher-invalid-color: text-color($text-invalid) !default;
$switcher-disabled-color: text-color($text-disabled) !default;
$switcher-selected-color: text-color($text-selected) !default;

:module(Switcher) {
  cursor: pointer;
  display: inline-block;
  pointer-events: none;

  &:modifier(Stable) {

    :component(Label)::before {
      font-size: initial;
    }
  }

  :component(Checkbox) {

    + :component(Label)::before {
      content: "\F096";
    }

    &:checked + :component(label)::before {
      color: $switcher-selected-color;
      content: "\F046";
    }

    &:indeterminate + :component(label)::before {
      content: "";
    }
  }

  :component(Radio) {

    + :component(Label)::before {
      content: "";
    }

    &:checked + :component(Label)::before {
      color: $switcher-selected-color;
      content: "";
    }
  }

  :component(Radio),
  :component(Checkbox) {
    opacity: 0; //Hide element
    position: absolute; //Remove element from current context

    @each $state in $states-order {
      @if $state == Focus {
        @include state($state, "+", ":component(Label)") {
          color: $switcher-focus-color;
        }

        @include state($state, "+", ":component(Label)::before") {
          color: $switcher-focus-color;
        }
      }
      @elseif $state == Hover {
        @include state($state, "+", ":component(Label)") {
          color: $switcher-hover-color;
        }

        @include state($state, "+", ":component(Label)::before") {
          color: $switcher-hover-color;
        }
      }
      @elseif $state == Active {
        @include state($state) {}
      }
      @elseif $state == Invalid {
        @include state($state, "+", ":component(Label)") {
          color: $switcher-invalid-color;
        }

        @include state($state, "+", ":component(Label)::before") {
          color: $switcher-invalid-color;
        }
      }
      @elseif $state == Disabled {
        @include state($state, "+", ":component(Label)") {
          color: $switcher-disabled-color;
          pointer-events: none;
        }

        @include state($state, "+", ":component(Label)::before") {
          color: $switcher-disabled-color;
        }
      }
    }
  }

  :component(Label) {
    align-items: center;
    display: flex;
    pointer-events: auto; //Restore clickability
    transition: color $animated;

    &::before {
      -moz-osx-font-smoothing: grayscale;
      -webkit-font-smoothing: antialiased;
      color: $switcher-color;
      font-family: FontAwesome;
      font-style: normal;
      font-weight: normal;
      padding-right: 0.55em;
      text-rendering: auto; //Optimizelegibility throws things off #1094
      transform: translate(0, 0); //Ensures no half-pixel rendering in firefox
      transition: color $animated;
      width: 0.55em;
    }
  }
}

@if (map-get($m, debug)) { @import "debug"; }
